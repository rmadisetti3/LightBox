/* Main.ino file generated by New Project wizard
 *
 * Created:   Sun Oct 18 2020
 * Processor: Arduino Leonardo
 * Compiler:  Arduino AVR (Proteus)
 */

// Peripheral Configuration Code (do not edit)
//---CONFIG_BEGIN---
#pragma GCC push_options
#pragma GCC optimize ("Os")

#include <core.h> // Required by cpu
#include <cpu.h>
#include <spi.h> // Required by spi
#include <spiport.h>

#pragma GCC pop_options

// Peripheral Constructors
CPU &cpu = Cpu;
SpiPort &spi = Spi;

void peripheral_setup () {
 spi.begin ();
}

void peripheral_loop() {
}
//---CONFIG_END---
char inSPI;
char outSPI;

void setup () {
   peripheral_setup();
   spi.setup(4000000L,1,0x00);
   
   // Enable Hardware addressing and disable sequential accessing
   spi.beginTransaction(10);
   spi.send().arg(0x40).end();
   spi.send().arg(0x0A).end();
   spi.send().arg(0x28).end();
   spi.endTransaction();
   delay(100);
   
   // Set Port A GPIO0-7 to input
   spi.beginTransaction(10);
   spi.send().arg(0x40).end();
   spi.send().arg(0x00).end();
   spi.send().arg(0xFF).end();
   spi.endTransaction();
   delay(100);
   
   // Set Port B GPIO0-7 to output
   spi.beginTransaction(10);
   spi.send().arg(0x40).end();
   spi.send().arg(0x01).end();
   spi.send().arg(0x00).end();
   spi.endTransaction();
   delay(100);

}

void loop() {
   peripheral_loop();


   readSPI();
   outSPI = inSPI;
   writeSPI();
   delay(100);
}

void readSPI() {
   spi.beginTransaction(10);
   spi.send().arg(0x41).end();
   spi.send().arg(0x12).end();
   inSPI=spi.transfer(0x00);
   spi.endTransaction();
}

void writeSPI() {
   spi.beginTransaction(10);
   spi.send().arg(0x40).end();
   spi.send().arg(0x13).end();
   spi.send().arg(outSPI).end();
   spi.endTransaction();
}