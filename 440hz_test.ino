/* Main.ino file generated by New Project wizard
 *
 * Created:   Sun Oct 18 2020
 * Processor: Arduino Leonardo
 * Compiler:  Arduino AVR (Proteus)
 */

// Peripheral Configuration Code (do not edit)
//---CONFIG_BEGIN---
#pragma GCC push_options
#pragma GCC optimize ("Os")

#include <core.h> // Required by cpu
#include <cpu.h>
#include <spi.h> // Required by spi
#include <spiport.h>

#pragma GCC pop_options

// Peripheral Constructors
CPU &cpu = Cpu;
SpiPort &spi = Spi;

void peripheral_setup () {
 spi.begin ();
}

void peripheral_loop() {
}
//---CONFIG_END---
char inSPI;
char outSPI;
long sample = 0;

void setup () {
   peripheral_setup();
   spi.setup(4000000L,1,0x00);
   
   // Enable Hardware addressing and disable sequential accessing
   spi.beginTransaction(10);
   spi.send().arg(0x40).end();
   spi.send().arg(0x0A).end();
   spi.send().arg(0x28).end();
   spi.endTransaction();
   delay(100);
   
   // Set Port A GPIO0-7 to input
   spi.beginTransaction(10);
   spi.send().arg(0x40).end();
   spi.send().arg(0x00).end();
   spi.send().arg(0xFF).end();
   spi.endTransaction();
   delay(100);
   
   // Set Port B GPIO0-7 to output
   spi.beginTransaction(10);
   spi.send().arg(0x40).end();
   spi.send().arg(0x01).end();
   spi.send().arg(0x00).end();
   spi.endTransaction();
   delay(100);
   
   // Using Timer/Counter3 for timer interrupt
   // Disable interrupts
   cli();
   //Initialize the entire Timer/Counter Control Register A to 0
   TCCR3A = 0; 
   // InitializeTimer/Counter Control B to the binary value:
   // '0000 1001'
   TCCR3B = 0x09;
   // This sets the timer to the following settings:
   // Waveform Generation Mode (WGM[3:0])
   // '0100'   -   Clear Timer on Compare (CTC)
   // Clock Select (CS[2:0])
   // '001'     -   16MHz Clock, not prescaled
   
   // Initialize Timer/Counter value to 0
   TCNT3 = 0;
   
   // Set Output Compare Register A to ensure 1024Hz
   // 16MHz/1024= 15625 Clock Edges per interrupt
   // Minus 1 because it executes on the next clock
   OCR3A = 15624; 
   //  Set the Timer Interrupt Mask Register to mark
   // Output Compare A Match Interrupt Enable bit high
   // 'XXXX XX1X'
   TIMSK3 |= 0x02;
   // Enable interrupts
   sei();
   
}

void loop() {
   peripheral_loop();
}

// Interrupt Service routine for Timer3 Compare Match A 
ISR(TIMER3_COMPA_vect){
   // sin(2*pi*440/1024*n)
   outSPI = (int)(0.5+170.0*sin(2.6998*(double)sample));
   writeSPI();
   ++sample;
}

void readSPI() {
   spi.beginTransaction(10);
   spi.send().arg(0x41).end();
   spi.send().arg(0x12).end();
   inSPI=spi.transfer(0x00);
   spi.endTransaction();
}

void writeSPI() {
   spi.beginTransaction(10);
   spi.send().arg(0x40).end();
   spi.send().arg(0x13).end();
   spi.send().arg(outSPI).end();
   spi.endTransaction();
}